#include <bits/stdc++.h>

using namespace std;

const int N = 7;
const int MOD = 2;
const int MAXN = 4000;
const double eps = 0.00001;
const int nn = 56;
const int mm = 540;
bool debug = false;
bool err = false;
bool isDivided;

vector<int> e[mm][mm];
vector<vector<int> > allMarks;

int mult[MAXN];

int mat[N][N];

int modul(int x, int m){
    x = abs(x);
    return x % 2;
}

int modul(int x){
    return modul(x, MOD);
}

struct monom{
    int a;
    vector<int> x;
};

monom createMon (){
    struct monom mon;
    mon.x.resize(N);
    mon.a = 0;
    for (int i = 0; i < N; i++){
        mon.x[i] = 0;
    }
    return mon;
}

void printVec(vector<int> v) {
    for (int i = 0; i < v.size(); i++){
        cout << v[i] << " ";
    }
    cout << endl;
}

void printMonom(monom mon){
	cout << mon.a << ' ';
    for (int k = 0; k < N; k++){
        cout << mon.x[k] << ' ';
    }
}

void printPolinom (vector<monom> polinom){
	for (int j = 0; j < polinom.size(); j++){
            monom mon = polinom[j];
            printMonom(mon);

    }
    cout << endl;

}

void printPolinom (vector<vector<monom> > polinom){
	for (int j = 0; j < polinom.size(); j++){
            printPolinom(polinom[j]);

    }
    cout << endl;

}

vector<monom> createEd(){
    monom mon = createMon();
    mon.a = 1;
    vector<monom> ed;
    ed.push_back(mon);
    return ed;
}

vector<int> vCl(int n){
	vector<int> v(n);
	fill(v.begin(), v.end(), 0);
	return v;
}

string chsToStr(char * s){
    int n;
    for (n = 0; s[n] != '\0'; n++);
    string st;
    st.resize(n);
    for (int i = 0; i <= n; i++){
        st[i] = s[i];
    }
    return st;
}

vector<int> symm (int m, vector<int> v){
    int x = v[m];
    for (int i = 0; i < N; i++){
        v[i] -= mat[i][m]*x;
    }
    return v;
}


int step(monom mon){
    int coun = 0;
    for (int i = 0; i < N; i++){
        coun += mon.x[i];
    }
    return coun;
}

int step (vector<monom> polinom){
    if (polinom.size() == 0){
        return 0;
    }
    int stp = step(polinom[0]);
    for (int i = 0; i < polinom.size(); i++){
        if (stp != step(polinom[i])){
            cout << "Error 13" << endl;
            printPolinom(polinom);
            return stp;
        }
    }
    return stp;
}

int step(vector<vector<monom> > polinom){
    int sum = 0;
    for (int i = 0; i < polinom.size(); i++){
        sum += step (polinom[i]);
    }
    return sum;
}


vector<int> mtov(vector<monom> polinom){
    if (step(polinom) != 1){
        cout << "Error 15" << endl;
    }
    vector<int> ans = vCl(N);
    for (int i = 0; i < polinom.size(); i++){
        int x = 0;
        for (int j = 0; j < N; j++){
            x += polinom[i].x[j]*j;
        }
        ans[x] += polinom[i].a;
    }
    return ans;
}

vector<monom> vtom (vector<int> v){
    vector<monom> polinom;
    for (int i = 0; i < N; i++){
        monom mon = createMon();
        mon.x[i] = 1;
        mon.a = v[i];
        if (mon.a != 0){
            polinom.push_back(mon);
        }
    }
    return polinom;
}

bool compare(monom a, monom b){
    if (b.a == 0){
        return false;
    }
    if (a.a == 0){
        return true;
    }
    return a.x < b.x;
}

void truePrintPolinom(monom mon){
    if (mon.a != 0){
        if (mon.a < 0){
            cout << "-";
        }
        if (mon.a > 0){
            cout << "+";
        }
        if (abs(mon.a) != 1 || step(mon) == 0){
            cout << abs(mon.a);
        }
        for (int i = 0; i < N; i++){
            for (int j = 0; j < mon.x[i]; j++){
                cout << "a" << i+1;
            }
        }
    }
}

void truePrintPolinom(vector<monom> polinom){
    for (int i = 0; i < polinom.size(); i++){
        truePrintPolinom(polinom[i]);
    }
}

void truePrintPolinom(vector<vector<monom> > polinom){
    if (polinom.size() == 0){
        return;
    }
    for (int i = 0; i < polinom.size(); i++){
        cout << "(";
        truePrintPolinom(polinom[i]);
        cout << ")";
    }
    cout << endl;
}

void truePrintPolinom(FILE * fout, monom mon){
    if (mon.a != 0){
        if (mon.a < 0){
            fprintf (fout, "-");
        }
        if (mon.a > 0){
            fprintf (fout, "+");
        }
        if (abs(mon.a) != 1){
            fprintf (fout, "%d", abs(mon.a));
        }
        for (int i = 0; i < N; i++){
            for (int j = 0; j < mon.x[i]; j++){
                fprintf (fout, "a%d", i+1);
            }
        }
    }
}

void truePrintPolinom(FILE * fout, vector<monom> polinom){
    for (int i = 0; i < polinom.size(); i++){
        truePrintPolinom(fout, polinom[i]);
    }
}

void truePrintPolinom(FILE * fout, vector<vector<monom> > polinom){
    if (polinom.size() == 0){
        return;
    }
    for (int i = 0; i < polinom.size(); i++){
        fprintf (fout, "(");
        truePrintPolinom(fout, polinom[i]);
        fprintf (fout, ")");
    }
    fprintf(fout, "\n");
}

void truePrintVec(vector<int> v){
    for (int i = 0; i < v.size(); i++){
        if (v[i] != 0){
            cout << "+";
            if (v[i] != 1){
                cout << v[i];
            }
            cout << "a" << i+1;
        }
    }
    cout << endl;
}

vector<monom> simplify (vector<monom> polinom){
	map<vector<int>, vector<int>> m;
	for (int l = 0; l < polinom.size(); l++){
		monom temp = polinom[l];

		m[temp.x].push_back(temp.a);
	}
	vector<monom> ans;
	for (pair<vector<int>, vector<int>> p: m){
        monom mon = createMon();
        mon.x = p.first;
        for (int i = 0; i < p.second.size(); i++){
            mon.a += p.second[i];
        }
        mon.a = modul(mon.a,MOD);

        if (abs(mon.a) >0.001){
            ans.push_back(mon);
        }
	}
	return ans;
}

vector<vector<monom> > simplify(vector<vector<monom> > polinom){
    vector<vector<monom> > ans;
    for (int i = 0; i < polinom.size(); i++){
        ans.push_back(simplify(polinom[i]));
    }
    return ans;
}

bool isEqual(vector<int> a, vector<int> b){
	if (a.size() != b.size()){
		cout << "Smth strange" << endl;
		printVec(a);
		cout << " " << a.size() << " ";
		printVec(b);
		cout << " " << b.size() << endl;
		return false;
	}
	for (int i = 0; i < a.size(); i++){
		if (a[i] != b[i]){
			return false;
		}
	}
	return true;
}

bool isEqual(monom a, monom b){
    if (a.a != b.a){
        return false;
    }
    return isEqual(a.x, b.x);
}

bool isEqual(vector<monom> a, vector<monom> b){
    if (step(a) != step(b)){
        return false;
    }
    a = simplify (a);
    b = simplify (b);
	if (a.size() != b.size()){
		return false;
	}
	sort(a.begin(), a.end(), compare);
	sort(b.begin(), b.end(), compare);
    for (int i = 0; i < a.size(); i++){
        if (!isEqual(a[i], b[i])){
            return false;
        }
    }
    return true;
}

vector<monom> multiply (vector<monom> a, vector<monom> b){

	vector<monom> ans;
	if (a.size() == 0){
		return ans;
	}
	if (b.size() == 0){
		return ans;
	}
	for (int i = 0; i < a.size(); i++){
		for (int j = 0; j < b.size(); j++){
			monom mon = createMon();
			mon.a = a[i].a*b[j].a;
			//mon.a = modul(mon.a,MOD);
			for (int k = 0; k < N; k++){
				mon.x[k] = a[i].x[k]+b[j].x[k];

			}
			ans.push_back(mon);
		}
	}
	return simplify(ans);
}

vector<string> split (string s){
    int i = 0;
    int k = 1;
    vector<string> mons;
    while (i < s.length()){
        string mon;
        while (s[i] != '+' && s[i] != '-' && i < s.length()&& s[i] != '('){
            mon.push_back(s[i]);
            i++;
        }
        while (s[i] == '('){
        	while (s[i] != ')'){
        		mon.push_back(s[i]);
        		i++;
        	}
        	mon.push_back(s[i]);
        	i++;
        }

        if (s[i] == '+'){
        	mult[k] = 1;
        } else {
        	mult[k] = -1;
        }
        k++;
        mons.push_back(mon);
        i++;
    }
    return mons;
}


monom monXint(monom mon, int x){
	mon.a *= x;
	//mon.a = modul(mon.a,MOD);
	return mon;
}

vector<monom> monXint(vector<monom> mon, int x){
	for (int i = 0; i < mon.size(); i++){
        mon[i] = monXint(mon[i], x);
    }
    return mon;
}

monom strToMonom(string monInStr, int t){
	int a = 0;
    int i = 0;
    while (monInStr[i] != 'a' && i < monInStr.length()){
        a *= 10;
        //a = modul(a,MOD);
        a += monInStr[i]-'0';
        //a = modul(a,MOD);
        i++;
    }
    if (a == 0) a = 1;
    a *= mult[t];
    //cout << a << endl;
    struct monom mon = createMon();
    //cout << i << "! " << monInStr[i];
    mon.a = a;//modul(a,MOD);
    while (i < monInStr.length()){
        if (monInStr[i] == 'a'){
            mon.x[monInStr[i+1] - '1']++;
        } else {
            cout << "Error 1 "<< i << " !" << monInStr.size();
            cout << monInStr << endl;
        }
        i+=2;

    }
    return mon;
}

vector<vector<monom> > calculate (string monInStr){
    if (monInStr.size() == 0){
		vector<vector<monom> > polinom;
		return polinom;
	}
	vector<monom> firPolinom;
	int i = 2;
	int sign = 1;
	if (monInStr[1] == '-'){
        sign = -1;
	} else if (monInStr[1] == '+'){
        sign = 1;
	} else {
	    cout << monInStr << endl;
        cout << "Error 12" << endl;
	}
	//cout << "!" << monInStr << endl;
	while (monInStr[i] != ')'){
		string firMon;
	    while (monInStr[i] != '+' && monInStr[i] != '-' && monInStr[i] != ')' && monInStr[i] != '('){
    		firMon.push_back(monInStr[i]);
    		i++;
    	}
    	if (firMon.length() != 0){
    	if (monInStr[i] == '('){
    		cout << "Error 2";
    		err = true;
    		vector<vector<monom> > polinom;
    		return polinom;
    	}
    	firPolinom.push_back(monXint(strToMonom(firMon, 0), sign));
    	if (monInStr[i] == '-'){
    		sign = -1;
    	} else {
    		sign = 1;
    	}
    	if (monInStr[i] == ')') break;
    	}
    	i++;
	}
	vector<vector<monom> > polinom = calculate(monInStr.substr(i+1, monInStr.size()));

    polinom.push_back(firPolinom);

    return polinom;

    //return polinom;
}

vector<int> strToVec(string s){
	vector<int> v = vCl(N);
	for (int i = 0; i < s.length(); i++){
		if (s[i] == 'a'){
			if (s[i-2] == '+' || s[i-3] == '+'){
				v[s[i+1]-'1'] += s[i-1] - '0';
			} else if (s[i-2] == '-' || s[i-3] == '-'){
				v[s[i+1]-'1'] -= s[i-1] - '0';
			} else {
				cout << "Error 5" << endl;
				cout << s << endl;
			}
		}
	}
	return v;
}

vector<vector<monom> > neMonXint(vector<vector<monom> > mon, int x){
	for (int i = 0; i < mon.size(); i++){
        mon[i] = monXint(mon[i], x);
    }
    return mon;
}

bool isMore(vector<int> a, vector<int> b){
    if (a.size() > b.size()){
        return true;
    }
    if (a.size() < b.size()){
        return false;
    }
    for (int i = a.size() - 1; i >= 0; i--){
        if (a[i] > b[i]){
            return true;
        }
        if (a[i] < b[i]){
            return false;
        }
    }
    return false;
}

bool divide (vector<int> a, vector<int> b){
    int mmm = -1;
    for (int i = 0; i < a.size(); i++){
        if (a[i] == 1){
            mmm = i;
        }
    }
    a.resize(mmm+1);
    mmm = -1;
    for (int i = 0; i < b.size(); i++){
        if (b[i] == 1){
            mmm = i;
        }
    }
    b.resize(mmm+1);

    if (a.size() == 0){
        return true;
    }
    if (a.size() < b.size()){
        return false;
    }
    if (b.size() == 0){
        cout << "Error 22" << endl;
        return true;
    }
    int m = -1;
    int x = a.size() - b.size();
    vector<int> c = vCl(a.size());
    /*for (int i = x; i < a.size(); i++){
        c[i] = b[i - x];
    }
    int ad = 0;
    if (isMore(c, a)){
        ad = 1;
        x--;
    }*/

    for (int i = a.size() - 1/*-ad*/; i >= x; i--){
        a[i] -= b[i - x];
        a[i] = modul(a[i]);
        /*if (a[i] == -1){
            int k;
            for (k = i; k < a.size() && a[k] != 1; k++);
            if (k == a.size()){
                cout << "wtf" << endl;
                return false;
            }
            a[k] = 0;
            for (int j = k - 1; j >= i; j--){
                a[j] = 1;
            }
            if (m == k){
                m--;
            }
        }*/
        if (a[i] == 1){
            m = max(m, i);
        }
    }
    int trueM = -1;
    for (int i = 0; i < a.size(); i++){
        if (a[i] == 1){
            trueM = i;
        }
    }
    a.resize(trueM+1);

    return divide(a, b);
}

bool checkDivide(vector<monom> pol, vector<int> d){
    if (pol.size() == 0){
        return true;
    }
    if (d.size() == 0){
        cout << "Error 32" << endl;
    }
    int cd = 0;
    int md = -1;
    for (int i = 0; i < d.size(); i++){
        if (d[i] != 0){
            cd++;
            md = i;
        }
    }
    if (cd == 0){
        cout << "Error 33" << endl;
    }
    if (cd == 1){
        for (int i = 0; i < pol.size(); i++){
            if (pol[i].x[md] < d[md]){
                return false;
            }
        }
        return true;
    }
    for (int i = 0; i < 4; i++){
        vector<int> ra(d.size());
        int m = -1;
        for (int l = 0; l < d.size(); l++){
            ra[l] = rand() % 200 + 1;
        }
        vector<int> polinom = vCl(5000);
        vector<int> del = polinom;
        for (int i = 0; i < pol.size(); i++){
            int x = 0;
            for (int l = 0; l < d.size(); l++){
                x += pol[i].x[l] * ra[l];
            }
            polinom[x] += pol[i].a;
            polinom[x] = modul(polinom[x]);
            m = max(m, x);
        }
        m = -1;
        for (int i = 0; i < d.size(); i++){
            if (d[i] != 0){
                del[d[i]*ra[i]] += 1;
                del[d[i]*ra[i]] = modul(del[d[i]*ra[i]]);
                m = max(m, d[i]*ra[i]);
            }
        }
        for (int i = 0; i < polinom.size(); i++){
            if (polinom[i] > 0){
                m = i;
            }
        }
        polinom.resize(m+1);
        m = -1;
        for (int i = 0; i < del.size(); i++){
            if (del[i] > 0){
                m = i;
            }
        }
        del.resize(m+1);
        if (m == -1){
            if (polinom.size() == 0){
                continue;
            } else {
                return false;
            }
        }
        bool f = divide (polinom, del);
        /*if (i == 0){
            truePrintVec(ra);
            truePrintVec(d);
            printVec(polinom);
            printVec(del);

        }*/
        if (!f) {
            if (debug){
                truePrintVec(ra);
                truePrintPolinom(pol);
                cout << endl;
                truePrintVec(d);
                printVec(polinom);
                printVec(del);
            }
            return false;
        }
    }

    return true;
}

vector<monom> finalDivide (vector<monom> pol, vector<monom> d){
    vector<monom> ans;
    if (pol.size() == 0){
        return pol;
    }
    if (isEqual(pol, d)){
        monom mon = createMon();
        mon.a = 1;
        ans.push_back(mon);
        return ans;
    }
    if (step(d) == 0){
        return pol;
    }
    if (step(d) > 1) {
        cout << "Error 24" << endl;
        isDivided = false;
        return pol;
    }
    int m = 0;
    for (int i = 0; i < d[0].x.size(); i++){
        m += d[0].x[i]*i;
    }

    if (d.size() == 1){
        for (int i = 0; i < pol.size(); i++){
            if (pol[i].x[m] == 0){
                cout << "№";
                isDivided = false;
                return pol;
            }
            pol[i].x[m]--;
        }
        return pol;
    }
    vector<monom> res;
    int ll = step(pol);
    vector<vector<monom> > prPow(ll+1);
    vector<vector<monom> > quotient(ll+1);
    monom ed = createMon();
    ed.a = 1;
    vector<monom> ped;
    ped.push_back(ed);
    prPow[1] = d;
    prPow[0] = ped;
    ed.x[m] = 1;
    prPow[1].push_back(ed);
    prPow[1] = simplify(prPow[1]);
    quotient[1] = ped;
    for (int i = 2; i <= ll; i++){
        prPow[i] = multiply(prPow[i-1], prPow[1]);
        for (int j = 0; j < i; j++){
            vector<monom> temp = prPow[i-1-j];
            for (int l = 0; l < temp.size(); l++){
                temp[l].x[m] = j;
                quotient[i].push_back(temp[l]);
            }
        }
        //prPow[i] = simplify(prPow[i]);
        //quotient[i] = simplify(quotient[i]);
    }
    for (int i = 0; i < pol.size(); i++){
        monom mon = pol[i];
        int t = mon.x[m];
        mon.x[m] = 0;
        vector<monom> tec = prPow[t], prAns = quotient[t];
        for (int j = 0; j < tec.size(); j++){
            for (int l = 0; l < N; l++){
                tec[j].x[l] += mon.x[l];
            }
        }
        for (int j = 0; j < prAns.size(); j++){
            for (int l = 0; l < N; l++){
                prAns[j].x[l] += mon.x[l];
            }
        }

        for (int j = 0; j < tec.size(); j++){
            res.push_back(tec[j]);
        }

        for (int j = 0; j < prAns.size(); j++){
            ans.push_back(prAns[j]);
        }
    }
    ans = simplify(ans);
    res = simplify(res);
    if (res.size() != 0){
        //cout << "Error 26" << endl;
        //truePrintPolinom(res);
        cout << "№";
        isDivided = false;
        //cout << endl;
    }
    return ans;
}

vector<vector<monom> > dPolinom (vector<vector<monom> > aa, vector<vector<monom> > bb){
    vector<vector<monom> > ans, a, b;
    if (bb.size() == 0){
        return aa;
    }
    if (aa.size() == 0){
        return bb;
    }
    //cout << "##" << a.size() <<  b.size() << endl;
    vector<bool> useda(aa.size());
    vector<bool> usedb(bb.size());
	fill(useda.begin(), useda.end(), false);
    fill(usedb.begin(), usedb.end(), false);
    /*for (int i = 0; i < aa.size(); i++){
        if (!useda[i] && step(aa[i]) > 1){
            for (int j = 0; j < bb.size(); j++){
                if (!usedb[j] && step(bb[j]) == 1){
                    if (checkDivide(aa[i], mtov(bb[j]))){
                        isDivided = true;
                        vector<monom> pol = finalDivide(aa[i], bb[j]);
                        if (isDivided){
                            useda.resize(useda.size() + 1);
                            useda[useda.size() - 1] = false;
                            useda[i] = true;
                            usedb[j] = true;
                            aa[i] = bb[j];
                            aa.push_back(pol);
                            ans.push_back(bb[j]);
                            break;
                        }
                    }
                }
            }
        }
    }
    for (int i = 0; i < bb.size(); i++){
        if (!usedb[i] && step(bb[i]) > 1){
            for (int j = 0; j < aa.size(); j++){
                if (!useda[j] && step(aa[j]) == 1){
                    if (checkDivide(bb[i], mtov(aa[j]))){
                        isDivided = true;
                        vector<monom> pol = finalDivide(bb[i], aa[j]);
                        if (isDivided){
                            usedb.resize(usedb.size() + 1);
                            usedb[usedb.size() - 1] = false;
                            usedb[i] = true;
                            useda[j] = true;
                            bb[i] = aa[j];
                            bb.push_back(pol);
                            ans.push_back(aa[j]);
                            break;
                        }
                    }
                }
            }
        }
    }*/
    for (int i = 0; i < aa.size(); i++){
        if (useda[i]){
            continue;
        }
        bool f = false;
        for (int j = 0; j < bb.size(); j++){
            if (!usedb[j] && isEqual(aa[i], bb[j])){
                f = true;
                usedb[j] = true;
                useda[i] = true;
                ans.push_back(aa[i]);
                break;
            }
        }

    }
    for (int i = 0; i < aa.size(); i++){
        if (!useda[i]){
            a.push_back(aa[i]);
        }
    }
    for (int i = 0; i < bb.size(); i++){
        if (!usedb[i]){
            b.push_back(bb[i]);
        }
    }
    if (a.size() == 0){
        monom ed = createMon();
        ed.a = 1;
        vector<monom> ped;
        ped.push_back(ed);
        a.push_back(ped);
    }
    if (b.size() == 0){
        monom ed = createMon();
        ed.a = 1;
        vector<monom> ped;
        ped.push_back(ed);
        b.push_back(ped);
    }

    vector<monom> polinom, polinom2;
    monom mon = createMon();
    mon.a = 1;
    polinom.push_back(mon);
    polinom2 = polinom;

    //polinom = removeBrackets(a);
    for (int i = 0; i < a.size(); i++){
        polinom = multiply(polinom, a[i]);
    }
    //polinom2 = removeBrackets(b);
    for (int i = 0; i < b.size(); i++){
        polinom2 = multiply(polinom2, b[i]);
    }
    for (int i = 0; i < polinom2.size(); i++){
        polinom.push_back(polinom2[i]);
    }
    vector<monom> pol = simplify(polinom);

    /*map<vector<int>, int> pol1, pol2;
    vector<int> ed = vCl(N);
    pol1[ed] = 1;
    pol2[ed] = 1;
    for (int i = 0; i < a.size(); i++){
        pol1 = multiply(pol1, mtovs(a[i]));
    }
    for (int i = 0; i < b.size(); i++){
        pol2 = multiply(pol2, mtovs(b[i]));
    }
    for (pair<vector<int>, int> p: pol2){
        pol1[p.first] += p.second;
        pol1[p.first] = modul (pol1[p.first]);
    }
    vector<monom> pol = vstom(pol1);*/
    if (pol.size() == 0){
        vector<vector<monom> > ans0;
        return ans0;
    }

    vector<vector<int>> div;
    /*if (step(pol) > 1){
        for (int j = 0; j < allMarks.size(); j++){
            isDivided = true;
            bool f = checkDivide(pol, allMarks[j]);
            if (f && isDivided){
                div.push_back(allMarks[j]);
            }
        }
        for (int j = 0; j < div.size(); j++){
            //cout << "!";
            //truePrintVec(div[j]);
            //cout << "@";
            //truePrintPolinom(pol);
            //cout << endl;
            isDivided = true;
            vector<monom> test = finalDivide (pol, vtom(div[j]));
            if (!isDivided){
                continue;
            }
            ans.push_back(vtom(div[j]));
            pol = test;
            //cout << "#";
            //truePrintPolinom(pol);
            //cout << endl << endl;
        }
    }*/
    if (step(pol) != 0){
        ans.push_back(pol);
    }
    if (step(ans) != step(aa) || step(ans) != step(bb)){
        cout << "Error 33" << endl;
        cout << step(aa) << " " << step(bb) << " " << step(ans) << endl;
        truePrintPolinom(aa);
        truePrintPolinom(bb);
        truePrintPolinom(ans);
    }
    return ans;
}

pair<vector<vector<monom> >, vector<vector<monom> > > upros (pair<vector<vector<monom> >, vector<vector<monom> > > drob){
    int stepen = step(drob.first) - step(drob.second);
    vector<vector<monom> > a, b, ans, newa;
    a = drob.first;
    b = drob.second;
    newa = a;
    if (a.size() == 0){
        return drob;
    }
    if (b.size() == 0 || step(b) == 0){
        return drob;
    }
    /*if (isEqual(a, b)){
        return ans;
    }*/
    vector<bool> used(a.size());
    vector<bool> usd(b.size());
	fill(used.begin(), used.end(), false);
	fill(usd.begin(), usd.end(), false);

    for (int i = 0; i < b.size(); i++){
        bool f = true;
        for (int j = 0; j < a.size(); j++){
            if (!used[j] && isEqual(a[j], b[i])){
                f = false;
                used[j] = true;
                usd[i] = true;
                break;
            }
        }
    }
    vector<vector<monom> > div;
    vector<int> num;
    vector<monom> step2 = createEd();
    int k = -1;
    for (int i = 0; i < a.size(); i++){
        if (!used[i] && step(a[i]) > 1){
            step2 = multiply(step2, a[i]);
            if (k != -1){
                used[k] = true;
            }
            a[i] = step2;
            k = i;
        }
    }
    for (int i = 0; i < b.size(); i++){
        if (!usd[i] && step(b[i]) == 1 && checkDivide(step2, mtov(b[i]))){
            div.push_back(b[i]);
            num.push_back(i);
        }
    }

    for (int i = 0; i < a.size(); i++){
        if (!used[i] && step(a[i]) > 1){
            vector<monom> pol = a[i];
            for (int k = 0; k < div.size(); k++){
                //cout << k << " ";
                //truePrintVec(div[j]);
                //cout << "@";

                //truePrintPolinom(pol);
                //cout << endl;
                isDivided = true;
                vector<monom> test = finalDivide (pol, div[k]);
                if (!isDivided){

                } else {
                //ans.push_back(vtom(div[k]));
                    usd[num[k]] = true;
                    pol = test;
                    newa.push_back(div[k]);
                }
            }
            newa[i] = pol;
            if (step(pol) > 0){

                ans.push_back(pol);
            }
        }
    }

    for (int i = 0; i < b.size(); i++){
        if (!usd[i]){
            if (ans.size() == 0){
                continue;
            }
            if (ans.size() > 1){
                cout << "Error 30" << endl;

                return {ans, ans};
            }
            if (isEqual(ans[0], b[i])){
                ans.clear();
                usd[i] = true;
            } else {
                continue;
            }
        }
    }

    for (int i = 0; i < a.size(); i++){
        if (!used[i] && step(a[i]) <= 1){
            ans.push_back(a[i]);
        }
    }

    vector<vector<monom> > znam;
    for (int i = 0; i < b.size(); i++){
        if (!usd[i]){
            znam.push_back(b[i]);
        }
    }
    if (ans.size() == 0){
        monom ed = createMon();
        ed.a = 1;
        vector<monom> ped;
        ped.push_back(ed);
        ans.push_back(ped);
    }
    for (int i = 0; i < newa.size(); i++){
        if (step(newa[i]) == 0){
            newa.erase(newa.begin()+ i, newa.begin()+ i + 1);
            i--;
        }
    }
    if (stepen != step(ans) - step(znam)){
        cout << "Error 33 " << step(drob.first) << " " << step(drob.second) << " " << step(ans) << " " << step(znam) << endl;
        truePrintPolinom(drob.first);
        truePrintPolinom(drob.second);
        truePrintPolinom(ans);
        truePrintPolinom(znam);

    }

    return {ans, znam};
}

pair<vector<vector<monom> >, vector<vector<monom> > > oldUpros (pair<vector<vector<monom> >, vector<vector<monom> > > drob){
    pair<vector<vector<monom> >, vector<vector<monom> > > ans;
    if (drob.first.size() == 0){
        return ans;
    }
    if (drob.second.size() == 0){
        cout << "Error 20";
        return ans;
    }
    vector<bool> used(drob.second.size());
    fill (used.begin(), used.end(), false);
    for (int i = 0; i < drob.first.size(); i++){
        bool f = true;
        for (int j = 0; j < drob.second.size(); j++){
            if (!used[j] && isEqual(drob.first[i], drob.second[j])){
                used[j] = true;
                f = false;
                break;
            }
        }
        if (f){
            ans.first.push_back(drob.first[i]);
        }
    }
    for (int i = 0; i < drob.second.size(); i++){
        if (!used[i]){
            ans.second.push_back(drob.second[i]);
        }
    }
    for (int i = 0; i < drob.first.size(); i++){
        if (step(drob.first[0]) > 1){

        }
    }
    return ans;
}

vector<vector<monom> > nod (vector<vector<monom> > a, vector<vector<monom> > b){
    vector<vector<monom> > ans;
    vector<bool> used(b.size());
    fill(used.begin(), used.end(), false);
    for (int i = 0; i < a.size(); i++){
        for (int j = 0; j < b.size(); j++){
            if (!used[j] && isEqual(a[i], b[j])){
                used[j] = true;
                ans.push_back(a[i]);
                break;
            }
        }
    }
    return ans;
}

vector<vector<monom> > divide (vector<vector<monom> > a, vector<vector<monom> > b){
    vector<vector<monom> > ans;
    vector<bool> used(a.size());
    fill(used.begin(), used.end(), false);
    for (int i = 0; i < b.size(); i++){
        bool f = false;
        for (int j = 0; j < a.size(); j++){
            if (!used[j] && isEqual(a[j], b[i])){
                used[j] = true;
                f = true;
                break;
            }
        }
        if (!f){
            cout << "Error 21" << endl;
        }
    }
    for (int i = 0; i < a.size(); i++){
        if (!used[i]){
            ans.push_back(a[i]);
        }
    }
    return ans;
}

pair<vector<vector<monom> >, vector<vector<monom> > > plusDrob(pair<vector<vector<monom> >, vector<vector<monom> > > a, pair<vector<vector<monom> >, vector<vector<monom> > > b){

    if (a.first.size() == 0 && a.second.size() == 0){
        return b;
    }
    if (b.first.size() == 0 && b.second.size() == 0){
        return a;
    }
    vector<vector<monom> > x, y, z, nd;
    nd = nod(a.second, b.second);
    x = divide (a.second, nd);
    y = divide (b.second, nd);
    z = x;
    for (int i = 0; i < b.second.size(); i++){
        z.push_back(b.second[i]);
    }
    for (int i = 0; i < a.first.size(); i++){
        y.push_back(a.first[i]);
    }
    for (int i = 0; i < b.first.size(); i++){
        x.push_back(b.first[i]);
    }

    x = dPolinom(x, y);
    pair<vector<vector<monom> >, vector<vector<monom> > > ans = {x, z};
    return upros(ans);
}

vector<int> delete7 (vector<int> v){
    v[1] += v[6];
    v[4] += v[6];
    v[6] = 0;
    v[1] = modul(v[1]);
    v[4] = modul(v[4]);
    return v;
}

int main(){
    mult[0] = 1;
    freopen("outputold.txt", "r", stdin);
    for (int i = 0; i < N; i++){
        for (int j = 0; j < N; j++){
            cin >> mat[i][j];
        }
    }
    int n;
    cin >> n;
    n -= 2;
    string st;
    cin >> st;
    vector<string> words(n);
    for (int i = 0; i < n; i++){
        cin >> words[i];
    }
    cin >> st;
    vector<int> anm[nn][nn];
    for (int i = 0; i < 756; i++){
        int a, b;
        string s;
        cin >> a >> b >> s;
        vector<int> v = strToVec(s);
        v = delete7(v);
        //cout << a << b << s;
        anm[a-1][b-1] = v;
        anm[b-1][a-1] = v;//vecXint(v, -1);
    }

    vector<vector<int> > b(n);
    for (int i = 0; i < n; i++){
        b[i] = vCl(N);
        b[i][6] = 1;
        for (int j = words[i].size() - 2; j >= 0; j -= 2){
            b[i] = symm(words[i][j] - '1', b[i]);
        }
        for (int j = 0; j < N; j++){
            cout << b[i][j] << " ";
        }
        cout << endl;
    }
    fclose(stdin);
    freopen("output.txt", "r", stdin);
    int m;
    cin >> m;
    cin >> st;
    vector<string> ws(m);
    for (int i = 0; i < m; i++){
        cin >> ws[i];
    }
    for (int i = 0; i < 3240; i++){
        int a, b;
        string s;
        cin >> a >> b >> s;
        //cout << a << b << s << endl;

        vector<int> v = strToVec(s);
        //cout << a << b << s;
        e[a-1][b-1] = v;
        e[b-1][a-1] = v;
        e[a+270-1][b+270-1] = v;
        e[b+270-1][a+270-1] = v;
        bool f = true;
        for (int j = 0; j < allMarks.size(); j++){
            if (allMarks[j] == v){
                f = false;
                break;
            }
        }
        if (f) {
            allMarks.push_back(v);
        }
        //vecXint(v, -1);
    }
    for (int i = 0; i < m; i++){
        string s;
        cin >> s;
        vector<int> v = strToVec(s);
        e[i][i+270] = v;
        bool f = true;
        for (int j = 0; j < allMarks.size(); j++){
            if (allMarks[j] == v){
                f = false;
                break;
            }
        }
        if (f) {
            allMarks.push_back(v);
        }
    }


    vector<int> coun = vCl(n);
    vector<int> to = vCl(2*m);
    vector<vector<int> > proob(2*m);
    vector<vector<int> > c(m);
    for (int i = 0; i < m; i++){

        c[i] = vCl(N);
        c[i][6] = 1;
        c[i] = symm(6, c[i]);

        for (int j = ws[i].size() - 2; j >= 0; j -= 2){
            c[i] = symm(ws[i][j] - '1', c[i]);
        }
        bool f = false;
        for (int j = 0; j < n; j++){
            if (c[i] == b[j]){
                coun[j]++;
                proob[j].push_back(i);
                to[i] = j+1;
                f = true;
                break;
            }
        }
        if (!f){
            cout << "Error 1" << endl;
            cout << ws[i] << endl;
            for (int l = 0; l < N; l++){
                cout << c[i][l] << " ";
            }
            cout << endl;
            return 0;
        }
    }
    vector<int> vv = vCl(N);
    vv[6] = 1;
    char stt[1000] = "s7s6s5s4s2s3s4s5s6s7,";
    string sts = chsToStr(stt);
    for (int j = sts.size() - 2; j >= 0; j -= 2){
        vv = symm(sts[j] - '1', vv);
    }
    printVec(vv);
    for (int i = 0; i < m; i++){
        c[i] = vv;
        for (int j = ws[i].size() - 2; j >= 0; j -= 2){
            c[i] = symm(ws[i][j] - '1', c[i]);
        }
        bool f = false;
        for (int j = 0; j < n; j++){
            if (c[i] == b[j]){
                coun[j]++;
                proob[j].push_back(i+270);
                to[i+270] = j+1;
                f = true;
                break;
            }
        }
        if (!f){
            cout << "Error 1" << endl;
            return 0;
        }
    }

    for (int i = 0; i < n; i++){
        cout << coun[i] << " ";
    }
    cout << endl;
    for (int i = 0; i < 2*m; i++){
        cout << to[i] << " ";
    }
    cout << endl;
    fclose (stdin);
    for (int t = 440; t < 2*m; t++){
        if (t == 269){
            continue;
        }
        cout << "--------" << t << "--------"<< endl;
        if (t == 18){
            //debug = true;
        }
        char s1[100] = {'t','o', '-', '0','0','0','.','t','x','t'};
        s1[10] = '\0';
        s1[3] = t / 100 + '0';
        s1[4] = (t / 10)% 10 + '0';
        s1[5] = t % 10 + '0';
        s1[10] = '\0';
        FILE * fin = fopen(s1, "r");
        char s2[100] = {'r','e', 's', '0','0','0','.','t','x','t'};
        s2[10] = '\0';
        s2[3] = t / 100 + '0';
        s2[4] = (t / 10)% 10 + '0';
        s2[5] = t % 10 + '0';
        s2[10] = '\0';
        FILE * fout = fopen(s2, "w");

        vector<vector<vector<monom> > > vert(2*m);
        for (int k = 0; k < 2*m; k++){
            //cout << k << endl;
            char st[1000000];
            fscanf(fin, "%s", &st);
            string s = chsToStr(st);
            //cout << "!" << s << endl;
            if (s == "0"){
                continue;
            }
            cout << k << " ";
            vector<string> mons = split (s);
            for (int t = 0; t < mons.size(); t++){
                string monInStr = mons[t];
                //cout << endl << monInStr<< endl;
                if (monInStr[0] == '('){
                    vector<vector<monom> > polinom = calculate(monInStr);
                    if (err){
                        break;
                    }
                    /*cout << "!@#" << endl;
                    cout << monInStr << endl;
                    printPolinom(polinom);
                    */
                    polinom = simplify(polinom);
                    for (int j = 0; j < polinom.size(); j++){
                        vector<monom> pol = monXint(polinom[j], mult[t]);

                        if (pol.size() != 0){

                            vert[k].push_back(pol);
                        }
                    }
                }
                else {
                    cout << "Error 7" << endl;
                    exit;
                    //v[k].push_back(strToMonom(monInStr, t));
                }
            }
            if (err){
                break;
            }
            //printPolinom(vert[k]);
        }
        if (err){
            err = false;
            continue;
        }
        cout << endl;
        for (int i = 0; i < n; i++){

            cout << i << " ";
            int stp = -1;
            //cout << i << endl;
            vector<vector<monom> > mulx;
            for (int j = 0; j < n; j++){
                if (anm[i+1][j+1].size() > 0){
                    mulx.push_back(vtom(anm[i+1][j+1]));

                } else if (anm[j+1][i+1].size() > 0){
                    mulx.push_back(vtom(anm[j+1][i+1]));
                }
            }
            allMarks.clear();
            map<vector<int>, int> tmap;
            for (int y = 0; y < coun[i]; y++){
                for (int j = 0; j < 2*m; j++){
                        //cout << "$" << proob[i][y] << endl;
                    if (e[proob[i][y]][j].size() > 0){
                        if (tmap[e[proob[i][y]][j]] == 0){
                            allMarks.push_back(e[proob[i][y]][j]);
                            tmap[e[proob[i][y]][j]] = 1;
                        }
                    } else if (e[j][proob[i][y]].size() > 0){
                        if (tmap[e[j][proob[i][y]]] == 0){
                            allMarks.push_back(e[j][proob[i][y]]);
                            tmap[e[j][proob[i][y]]] = 1;
                        }
                    }
                }
            }
            pair<vector<vector<monom> >, vector<vector<monom> > > polx;
            for (int y = 0; y < coun[i]; y++){
                vector<vector<monom> > pol = vert[proob[i][y]];
                if (pol.size() == 0){
                    continue;
                }
                //cout << proob[i][y] << " " << i <<  " " << y << endl;
                //truePrintPolinom(pol);
                for (int l = 0; l < mulx.size(); l++){
                    pol.push_back(mulx[l]);
                }
                //printPolinom(pol);
                pair<vector<vector<monom> >, vector<vector<monom> > > drob;
                drob.first = pol;
                vector<vector<monom> > muly;
                for (int j = 0; j < 2*m; j++){
                        //cout << "$" << proob[i][y] << endl;
                    if (e[proob[i][y]][j].size() > 0){
                        muly.push_back(vtom(e[proob[i][y]][j]));
                    } else if (e[j][proob[i][y]].size() > 0){
                        muly.push_back(vtom(e[j][proob[i][y]]));
                    }
                }
                drob.second = muly;
                //cout << "!" << endl;
                //truePrintPolinom (drob.first);
                //truePrintPolinom (drob.second);
                drob = upros(drob);
                //cout << "@" << endl;
                //truePrintPolinom (polx.first);
                //truePrintPolinom (polx.second);
                //truePrintPolinom (drob.first);
                //truePrintPolinom (drob.second);

                polx = plusDrob(polx, drob);
                //truePrintPolinom (polx.first);
                //truePrintPolinom (polx.second);
            }
            //polx = upros(polx);
            if (polx.first.size() == 0){
                fprintf (fout, "0\n");
            } else {
                if (stp == -1){
                    stp = step(polx.first) - step(polx.second);
                }
                if (stp != step(polx.first) - step(polx.second)){
                    cout << "Error 21 " << t << " " << i << endl;
                }
                polx = upros(polx);
                truePrintPolinom(fout, polx.first);
                if (polx.second.size() > 0){
                    cout << endl << endl << "-----Rip-----" << endl << endl;
                    fprintf (fout, "-----------\n");
                    truePrintPolinom(fout, polx.second);
                    fprintf (fout, "\n");
                }
            }

        }
        cout << endl;
        fclose(fin);
        fclose(fout);
    }
}
